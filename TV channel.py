import pandas as pd
from scipy.optimize import linprog
import matplotlib.pyplot as plt

def save_results_to_excel(results_df, file_name):
    """
    –ó–±–µ—Ä—ñ–≥–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó —É —Ñ–∞–π–ª Excel.
    """
    try:
        results_df.to_excel(file_name, index=False)
        print(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É —Ñ–∞–π–ª: '{file_name}'")
    except Exception as e:
        print(f"\n‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ —Ñ–∞–π–ª—É: {e}")

def plot_split_comparison(results_df, title):
    """
    –ë—É–¥—É—î –¥—ñ–∞–≥—Ä–∞–º–∏ –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Å–ø–ª—ñ—Ç—ñ–≤.
    """
    # –û–±—á–∏—Å–ª–µ–Ω–Ω—è —á–∞—Å—Ç–∫–∏ –±—é–¥–∂–µ—Ç—É
    results_df['–î–æ–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç—É'] = (results_df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –±—é–¥–∂–µ—Ç'] / results_df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –±—é–¥–∂–µ—Ç'].sum()) * 100
    results_df['–î–æ–ª—è –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç—É'] = (results_df['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç'] / results_df['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç'].sum()) * 100
    
    fig, axes = plt.subplots(1, 2, figsize=(18, 8))
    fig.suptitle(f'–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –∫–∞–Ω–∞–ª—å–Ω–æ–≥–æ —Å–ø–ª—ñ—Ç–∞: {title}', fontsize=16)

    # –ì—Ä–∞—Ñ—ñ–∫ 1: –†–æ–∑–ø–æ–¥—ñ–ª —á–∞—Å—Ç–∫–∏ –±—é–¥–∂–µ—Ç—É
    axes[0].set_title('–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —á–∞—Å—Ç–∫–∏ –±—é–¥–∂–µ—Ç—É (%)')
    labels = results_df['–ö–∞–Ω–∞–ª']
    standard_share = results_df['–î–æ–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç—É']
    optimal_share = results_df['–î–æ–ª—è –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç—É']
    
    x = range(len(labels))
    width = 0.35
    
    rects1 = axes[0].bar(x, standard_share, width, label='–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —Å–ø–ª—ñ—Ç', color='gray')
    rects2 = axes[0].bar([p + width for p in x], optimal_share, width, label='–û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π —Å–ø–ª—ñ—Ç', color='skyblue')

    axes[0].set_ylabel('–ß–∞—Å—Ç–∫–∞ –±—é–¥–∂–µ—Ç—É, %')
    axes[0].set_xticks([p + width / 2 for p in x])
    axes[0].set_xticklabels(labels, rotation=45, ha="right")
    axes[0].legend()
    axes[0].grid(axis='y', linestyle='--', alpha=0.7)
    
    # –ì—Ä–∞—Ñ—ñ–∫ 2: –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ª–æ—Ç—ñ–≤
    axes[1].set_title('–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ª–æ—Ç—ñ–≤ (–û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π —Å–ø–ª—ñ—Ç)')
    optimal_slots = results_df['–û–ø—Ç–∏–º–∞–ª—å–Ω—ñ —Å–ª–æ—Ç–∏']
    
    axes[1].bar(labels, optimal_slots, color='skyblue')
    axes[1].set_ylabel('–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ª–æ—Ç—ñ–≤')
    axes[1].set_xticklabels(labels, rotation=45, ha="right")
    axes[1].grid(axis='y', linestyle='--', alpha=0.7)

    plt.tight_layout(rect=[0, 0.03, 1, 0.95])
    plt.show()

def optimize_split(standard_data_dict, user_aff_dict, budget, buying_audiences, optimization_goal, optimization_mode):
    """
    –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó –∫–∞–Ω–∞–ª—å–Ω–æ–≥–æ —Å–ø–ª—ñ—Ç–∞ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —Ä—ñ–∑–Ω–∏—Ö —Ä–µ–∂–∏–º—ñ–≤.
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:
    - standard_data_dict (dict): –°–ª–æ–≤–Ω–∏–∫ –∑—ñ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏.
    - user_aff_dict (dict): –°–ª–æ–≤–Ω–∏–∫ –∑ –¥–∞–Ω–∏–º–∏ Aff –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    - budget (int): –ó–∞–≥–∞–ª—å–Ω–∏–π —Ä–µ–∫–ª–∞–º–Ω–∏–π –±—é–¥–∂–µ—Ç.
    - buying_audiences (dict): –°–ª–æ–≤–Ω–∏–∫ {–°–•: –ë–ê}.
    - optimization_goal (str): 'Aff' –∞–±–æ 'TRP'.
    - optimization_mode (str): 'per_sh' –∞–±–æ 'total'.
    """
    
    # –û–±'—î–¥–Ω–∞–Ω–Ω—è –≤—Å—ñ—Ö –¥–∞–Ω–∏—Ö –≤ –æ–¥–∏–Ω DataFrame –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ
    all_data = pd.DataFrame()
    for sales_house in standard_data_dict:
        try:
            standard_df = pd.DataFrame(standard_data_dict[sales_house])
            user_df = pd.DataFrame(user_aff_dict[sales_house])
            merged_df = pd.merge(standard_df, user_df, on='–ö–∞–Ω–∞–ª')
            
            ba_key = buying_audiences.get(sales_house)
            if ba_key:
                merged_df['–¶—ñ–Ω–∞'] = merged_df[f'–¶—ñ–Ω–∞_{ba_key}']
                merged_df['TRP'] = merged_df[f'TRP_{ba_key}']
            
            all_data = pd.concat([all_data, merged_df], ignore_index=True)
            
        except KeyError:
            print(f"–ü–æ–º–∏–ª–∫–∞: –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –ë–ê '{ba_key}' –∞–±–æ –°–• '{sales_house}'.")
            return None
    
    if all_data.empty:
        print("–ü–æ–º–∏–ª–∫–∞: –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó.")
        return None

    all_results = pd.DataFrame()
    
    # –†–µ–∂–∏–º "–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –ø–æ –∫–æ–∂–Ω–æ–º—É –°–• –æ–∫—Ä–µ–º–æ"
    if optimization_mode == 'per_sh':
        print("\n–í–∏–±—Ä–∞–Ω–æ —Ä–µ–∂–∏–º: –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –ø–æ –∫–æ–∂–Ω–æ–º—É –°–• –æ–∫—Ä–µ–º–æ.")
        
        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç—É –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —á–∞—Å—Ç–∫–∏ –∫–æ–∂–Ω–æ–≥–æ –°–•
        total_standard_budget = (all_data['TRP'] * all_data['–¶—ñ–Ω–∞']).sum()

        for sales_house, group_df in all_data.groupby('–°–•'):
            print(f"‚úÖ –ü—Ä–æ–≤–æ–¥–∏–º–æ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—é –¥–ª—è –°–•: {sales_house}")
            
            group_standard_budget = (group_df['TRP'] * group_df['–¶—ñ–Ω–∞']).sum()
            group_budget = (group_standard_budget / total_standard_budget) * budget
            
            group_df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –±—é–¥–∂–µ—Ç'] = group_df['TRP'] * group_df['–¶—ñ–Ω–∞']
            group_df['–î–æ–ª—è –ø–æ –±—é–¥–∂–µ—Ç—É (%)'] = (group_df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –±—é–¥–∂–µ—Ç'] / group_df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –±—é–¥–∂–µ—Ç'].sum()) * 100
            
            group_df['–í—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è'] = group_df.apply(lambda row: 0.20 if row['–î–æ–ª—è –ø–æ –±—é–¥–∂–µ—Ç—É (%)'] >= 10 else 0.30, axis=1)
            group_df['–ù–∏–∂–Ω—è –º–µ–∂–∞'] = group_df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –±—é–¥–∂–µ—Ç'] * (1 - group_df['–í—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è'])
            group_df['–í–µ—Ä—Ö–Ω—è –º–µ–∂–∞'] = group_df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –±—é–¥–∂–µ—Ç'] * (1 + group_df['–í—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è'])
            
            c = -group_df[optimization_goal].values
            A_ub_group = [group_df['–¶—ñ–Ω–∞'].values]
            b_ub_group = [group_budget]
            A_lower = -pd.get_dummies(group_df['–ö–∞–Ω–∞–ª']).mul(group_df['–¶—ñ–Ω–∞'], axis=0).values
            b_lower = -group_df['–ù–∏–∂–Ω—è –º–µ–∂–∞'].values
            A_upper = pd.get_dummies(group_df['–ö–∞–Ω–∞–ª']).mul(group_df['–¶—ñ–Ω–∞'], axis=0).values
            b_upper = group_df['–í–µ—Ä—Ö–Ω—è –º–µ–∂–∞'].values
            A_group = [A_ub_group[0]] + list(A_lower) + list(A_upper)
            b_group = b_ub_group + list(b_lower) + list(b_upper)
            
            result = linprog(c, A_ub=A_group, b_ub=b_group, bounds=(0, None))
            
            if result.success:
                optimal_slots = result.x.round(0).astype(int)
                group_df['–û–ø—Ç–∏–º–∞–ª—å–Ω—ñ —Å–ª–æ—Ç–∏'] = optimal_slots
                group_df['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç'] = optimal_slots * group_df['–¶—ñ–Ω–∞']
                all_results = pd.concat([all_results, group_df])
            else:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó –¥–ª—è {sales_house}:", result.message)

    # –†–µ–∂–∏–º "–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –ø–æ –≤—Å—å–æ–º—É –±—é–¥–∂–µ—Ç—É"
    elif optimization_mode == 'total':
        print("\n–í–∏–±—Ä–∞–Ω–æ —Ä–µ–∂–∏–º: –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –ø–æ –≤—Å—å–æ–º—É –±—é–¥–∂–µ—Ç—É.")
        
        all_data['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –±—é–¥–∂–µ—Ç'] = all_data['TRP'] * all_data['–¶—ñ–Ω–∞']
        total_standard_budget = all_data['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –±—é–¥–∂–µ—Ç'].sum()
        
        all_data['–î–æ–ª—è –ø–æ –±—é–¥–∂–µ—Ç—É (%)'] = (all_data['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –±—é–¥–∂–µ—Ç'] / total_standard_budget) * 100
        
        all_data['–í—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è'] = all_data.apply(lambda row: 0.20 if row['–î–æ–ª—è –ø–æ –±—é–¥–∂–µ—Ç—É (%)'] >= 10 else 0.30, axis=1)
        all_data['–ù–∏–∂–Ω—è –º–µ–∂–∞'] = all_data['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –±—é–¥–∂–µ—Ç'] * (1 - all_data['–í—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è'])
        all_data['–í–µ—Ä—Ö–Ω—è –º–µ–∂–∞'] = all_data['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –±—é–¥–∂–µ—Ç'] * (1 + all_data['–í—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è'])

        c = -all_data[optimization_goal].values
        
        A_ub_total = [all_data['–¶—ñ–Ω–∞'].values]
        b_ub_total = [budget]
        
        A_lower = -pd.get_dummies(all_data['–ö–∞–Ω–∞–ª']).mul(all_data['–¶—ñ–Ω–∞'], axis=0).values
        b_lower = -all_data['–ù–∏–∂–Ω—è –º–µ–∂–∞'].values
        A_upper = pd.get_dummies(all_data['–ö–∞–Ω–∞–ª']).mul(all_data['–¶—ñ–Ω–∞'], axis=0).values
        b_upper = all_data['–í–µ—Ä—Ö–Ω—è –º–µ–∂–∞'].values
        
        A_total = [A_ub_total[0]] + list(A_lower) + list(A_upper)
        b_total = b_ub_total + list(b_lower) + list(b_upper)
        
        result = linprog(c, A_ub=A_total, b_ub=b_total, bounds=(0, None))
        
        if result.success:
            optimal_slots = result.x.round(0).astype(int)
            all_data['–û–ø—Ç–∏–º–∞–ª—å–Ω—ñ —Å–ª–æ—Ç–∏'] = optimal_slots
            all_data['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç'] = optimal_slots * all_data['–¶—ñ–Ω–∞']
            all_results = all_data
        else:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó: {result.message}")

    if not all_results.empty:
        total_optimized_cost = all_results['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç'].sum()
        total_optimized_aff = (all_results['–û–ø—Ç–∏–º–∞–ª—å–Ω—ñ —Å–ª–æ—Ç–∏'] * all_results['Aff']).sum()
        total_optimized_trp = (all_results['–û–ø—Ç–∏–º–∞–ª—å–Ω—ñ —Å–ª–æ—Ç–∏'] * all_results['TRP']).sum()
        
        # –î–æ–¥–∞–Ω–æ —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ TRP —Å–ø–ª—ñ—Ç—É
        all_results['TRP_–æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π_—Å–ø–ª—ñ—Ç (%)'] = (all_results['–û–ø—Ç–∏–º–∞–ª—å–Ω—ñ —Å–ª–æ—Ç–∏'] * all_results['TRP'] / total_optimized_trp) * 100

        print("\nüìä –ó–∞–≥–∞–ª—å–Ω—ñ –ø—ñ–¥—Å—É–º–∫–æ–≤—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –ø–æ –≤—Å—ñ–π –∫–∞–º–ø–∞–Ω—ñ—ó:")
        print(f"  - –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏–π –±—é–¥–∂–µ—Ç: {total_optimized_cost:.2f} –≥—Ä–Ω")
        print(f"  - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π –∑–∞–≥–∞–ª—å–Ω–∏–π Aff: {total_optimized_aff:.2f}")
        print(f"  - –ó–∞–≥–∞–ª—å–Ω–∏–π TRP: {total_optimized_trp:.2f}")
        print("-" * 30)
        
        # –í–∏–≤—ñ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤,
