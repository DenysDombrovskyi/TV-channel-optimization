import pandas as pd
from scipy.optimize import linprog
import matplotlib.pyplot as plt

def save_results_to_excel(results_df, file_name):
    """
    –ó–±–µ—Ä—ñ–≥–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó —É —Ñ–∞–π–ª Excel.
    """
    try:
        results_df.to_excel(file_name, index=False)
        print(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É —Ñ–∞–π–ª: '{file_name}'")
    except Exception as e:
        print(f"\n‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ —Ñ–∞–π–ª—É: {e}")

def plot_split_comparison(results_df, title):
    """
    –ë—É–¥—É—î –¥—ñ–∞–≥—Ä–∞–º–∏ –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Å–ø–ª—ñ—Ç—ñ–≤.
    """
    # –û–±—á–∏—Å–ª–µ–Ω–Ω—è —á–∞—Å—Ç–∫–∏ –±—é–¥–∂–µ—Ç—É
    results_df['–î–æ–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç—É'] = (results_df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –±—é–¥–∂–µ—Ç'] / results_df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –±—é–¥–∂–µ—Ç'].sum()) * 100
    results_df['–î–æ–ª—è –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç—É'] = (results_df['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç'] / results_df['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç'].sum()) * 100
    
    fig, axes = plt.subplots(1, 2, figsize=(18, 8))
    fig.suptitle(f'–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –∫–∞–Ω–∞–ª—å–Ω–æ–≥–æ —Å–ø–ª—ñ—Ç–∞: {title}', fontsize=16)

    # –ì—Ä–∞—Ñ—ñ–∫ 1: –†–æ–∑–ø–æ–¥—ñ–ª —á–∞—Å—Ç–∫–∏ –±—é–¥–∂–µ—Ç—É
    axes[0].set_title('–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —á–∞—Å—Ç–∫–∏ –±—é–¥–∂–µ—Ç—É (%)')
    labels = results_df['–ö–∞–Ω–∞–ª']
    standard_share = results_df['–î–æ–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç—É']
    optimal_share = results_df['–î–æ–ª—è –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç—É']
    
    x = range(len(labels))
    width = 0.35
    
    rects1 = axes[0].bar(x, standard_share, width, label='–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —Å–ø–ª—ñ—Ç', color='gray')
    rects2 = axes[0].bar([p + width for p in x], optimal_share, width, label='–û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π —Å–ø–ª—ñ—Ç', color='skyblue')

    axes[0].set_ylabel('–ß–∞—Å—Ç–∫–∞ –±—é–¥–∂–µ—Ç—É, %')
    axes[0].set_xticks([p + width / 2 for p in x])
    axes[0].set_xticklabels(labels, rotation=45, ha="right")
    axes[0].legend()
    axes[0].grid(axis='y', linestyle='--', alpha=0.7)
    
    # –ì—Ä–∞—Ñ—ñ–∫ 2: –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ª–æ—Ç—ñ–≤
    axes[1].set_title('–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ª–æ—Ç—ñ–≤ (–û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π —Å–ø–ª—ñ—Ç)')
    optimal_slots = results_df['–û–ø—Ç–∏–º–∞–ª—å–Ω—ñ —Å–ª–æ—Ç–∏']
    
    axes[1].bar(labels, optimal_slots, color='skyblue')
    axes[1].set_ylabel('–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ª–æ—Ç—ñ–≤')
    axes[1].set_xticklabels(labels, rotation=45, ha="right")
    axes[1].grid(axis='y', linestyle='--', alpha=0.7)

    plt.tight_layout(rect=[0, 0.03, 1, 0.95])
    plt.show()

def optimize_split_by_sales_house_and_ba(standard_data_dict, user_aff_dict, budget, buying_audiences, optimization_goal):
    """
    –û–ø—Ç–∏–º—ñ–∑—É—î –∫–∞–Ω–∞–ª—å–Ω–∏–π —Å–ø–ª—ñ—Ç –æ–∫—Ä–µ–º–æ –ø–æ –∫–æ–∂–Ω–æ–º—É –°–•, –≤—Ä–∞—Ö–æ–≤—É—é—á–∏ –¥–æ–ø—É—Å—Ç–∏–º—ñ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è,
    –≤–∏–±—Ä–∞–Ω—É –ë–ê —Ç–∞ —Ü—ñ–ª—å –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó.
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:
    - standard_data_dict (dict): –°–ª–æ–≤–Ω–∏–∫ –∑—ñ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –°–•.
    - user_aff_dict (dict): –°–ª–æ–≤–Ω–∏–∫ –∑ –¥–∞–Ω–∏–º–∏ Aff –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –°–•.
    - budget (int): –ó–∞–≥–∞–ª—å–Ω–∏–π —Ä–µ–∫–ª–∞–º–Ω–∏–π –±—é–¥–∂–µ—Ç.
    - buying_audiences (dict): –°–ª–æ–≤–Ω–∏–∫ {–°–•: –ë–ê}.
    - optimization_goal (str): 'Aff' –∞–±–æ 'TRP'.
    """
    all_results = pd.DataFrame()
    
    # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç—É –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —á–∞—Å—Ç–∫–∏ –∫–æ–∂–Ω–æ–≥–æ –°–•
    total_standard_budget = 0
    for sales_house in standard_data_dict:
        ba_key = buying_audiences.get(sales_house)
        if ba_key:
            df = pd.DataFrame(standard_data_dict[sales_house])
            df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –±—é–¥–∂–µ—Ç'] = df[f'TRP_{ba_key}'] * df[f'–¶—ñ–Ω–∞_{ba_key}']
            total_standard_budget += df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –±—é–¥–∂–µ—Ç'].sum()

    for sales_house in standard_data_dict:
        try:
            # 1. –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —Ç–∞ –æ–±'—î–¥–Ω–∞–Ω–Ω—è
            ba_key = buying_audiences.get(sales_house)
            if not ba_key:
                print(f"–ü–æ–º–∏–ª–∫–∞: –ù–µ –≤–∫–∞–∑–∞–Ω–∞ –±–∞—ó–Ω–≥–æ–≤–∞ –∞—É–¥–∏—Ç–æ—Ä—ñ—è –¥–ª—è {sales_house}.")
                continue

            standard_df = pd.DataFrame(standard_data_dict[sales_house])
            user_df = pd.DataFrame(user_aff_dict[sales_house])
            
            # –û–±'—î–¥–Ω–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
            merged_df = pd.merge(standard_df, user_df, on='–ö–∞–Ω–∞–ª')
            
            # –í–∏–±—ñ—Ä –∫–æ–ª–æ–Ω–æ–∫ TRP —ñ –¶—ñ–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –≤–∏–±—Ä–∞–Ω–æ—ó –ë–ê
            merged_df['–¶—ñ–Ω–∞'] = merged_df[f'–¶—ñ–Ω–∞_{ba_key}']
            merged_df['TRP'] = merged_df[f'TRP_{ba_key}']
            
            print(f"‚úÖ –ü–æ—á–∏–Ω–∞—î–º–æ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—é –¥–ª—è –°–•: {sales_house} –∑ –ë–ê: {ba_key}")
            print("-" * 30)

        except KeyError:
            print(f"–ü–æ–º–∏–ª–∫–∞: –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –ë–ê '{ba_key}' –∞–±–æ –°–• '{sales_house}'.")
            continue
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –¥–∞–Ω–∏—Ö: {e}")
            continue

        # 2. –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏—Ö —á–∞—Å—Ç–æ–∫ —Ç–∞ –º–µ–∂ –≤—ñ–¥—Ö–∏–ª–µ–Ω—å
        merged_df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –±—é–¥–∂–µ—Ç'] = merged_df['TRP'] * merged_df['–¶—ñ–Ω–∞']
        
        group_standard_budget = merged_df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –±—é–¥–∂–µ—Ç'].sum()
        group_budget = (group_standard_budget / total_standard_budget) * budget

        merged_df['–î–æ–ª—è –ø–æ –±—é–¥–∂–µ—Ç—É (%)'] = (merged_df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –±—é–¥–∂–µ—Ç'] / group_standard_budget) * 100
        
        merged_df['–í—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è'] = merged_df.apply(
            lambda row: 0.20 if row['–î–æ–ª—è –ø–æ –±—é–¥–∂–µ—Ç—É (%)'] >= 10 else 0.30, axis=1
        )
        merged_df['–ù–∏–∂–Ω—è –º–µ–∂–∞'] = merged_df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –±—é–¥–∂–µ—Ç'] * (1 - merged_df['–í—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è'])
        merged_df['–í–µ—Ä—Ö–Ω—è –º–µ–∂–∞'] = merged_df['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –±—é–¥–∂–µ—Ç'] * (1 + merged_df['–í—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è'])

        # 3. –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó
        goal_key = optimization_goal
        c = -merged_df[goal_key].values
        
        A_ub_group = [merged_df['–¶—ñ–Ω–∞'].values]
        b_ub_group = [group_budget]
        
        A_lower_bound_group = -pd.get_dummies(merged_df['–ö–∞–Ω–∞–ª']).mul(merged_df['–¶—ñ–Ω–∞'], axis=0).values
        b_lower_bound_group = -merged_df['–ù–∏–∂–Ω—è –º–µ–∂–∞'].values

        A_upper_bound_group = pd.get_dummies(merged_df['–ö–∞–Ω–∞–ª']).mul(merged_df['–¶—ñ–Ω–∞'], axis=0).values
        b_upper_bound_group = merged_df['–í–µ—Ä—Ö–Ω—è –º–µ–∂–∞'].values

        A_group = [A_ub_group[0]] + list(A_lower_bound_group) + list(A_upper_bound_group)
        b_group = b_ub_group + list(b_lower_bound_group) + list(b_upper_bound_group)
        
        bounds_group = [(0, None)] * len(merged_df)

        # 4. –í–∏–∫–æ–Ω–∞–Ω–Ω—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó
        result = linprog(c, A_ub=A_group, b_ub=b_group, bounds=bounds_group)

        # 5. –ê–Ω–∞–ª—ñ–∑ —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        if result.success:
            optimal_slots = result.x.round(0).astype(int)
            merged_df['–û–ø—Ç–∏–º–∞–ª—å–Ω—ñ —Å–ª–æ—Ç–∏'] = optimal_slots
            merged_df['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç'] = optimal_slots * merged_df['–¶—ñ–Ω–∞']
            merged_df['–û–ø—Ç–∏–º–∞–ª—å–Ω–∞ –¥–æ–ª—è (%)'] = (merged_df['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç'] / merged_df['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç'].sum()) * 100
            
            all_results = pd.concat([all_results, merged_df])
            
            print(f"\n–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –¥–ª—è {sales_house} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!")
            print(merged_df[['–ö–∞–Ω–∞–ª', '–û–ø—Ç–∏–º–∞–ª—å–Ω—ñ —Å–ª–æ—Ç–∏', '–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç', '–û–ø—Ç–∏–º–∞–ª—å–Ω–∞ –¥–æ–ª—è (%)']])
            print("-" * 30)
        else:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó –¥–ª—è {sales_house}:", result.message)
            print("-" * 30)
    
    # 6. –ü—ñ–¥—Å—É–º–∫–∏ —Ç–∞ –µ–∫—Å–ø–æ—Ä—Ç
    if not all_results.empty:
        total_optimized_cost = all_results['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç'].sum()
        total_optimized_aff = (all_results['–û–ø—Ç–∏–º–∞–ª—å–Ω—ñ —Å–ª–æ—Ç–∏'] * all_results['Aff']).sum()
        total_optimized_trp = (all_results['–û–ø—Ç–∏–º–∞–ª—å–Ω—ñ —Å–ª–æ—Ç–∏'] * all_results['TRP']).sum()

        print("\nüìä –ó–∞–≥–∞–ª—å–Ω—ñ –ø—ñ–¥—Å—É–º–∫–æ–≤—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –ø–æ –≤—Å—ñ–π –∫–∞–º–ø–∞–Ω—ñ—ó:")
        print(f"  - –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏–π –±—é–¥–∂–µ—Ç: {total_optimized_cost:.2f} –≥—Ä–Ω")
        print(f"  - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π –∑–∞–≥–∞–ª—å–Ω–∏–π Aff: {total_optimized_aff:.2f}")
        print(f"  - –ó–∞–≥–∞–ª—å–Ω–∏–π TRP: {total_optimized_trp:.2f}")
        print("-" * 30)
        
        save_results_to_excel(all_results[['–ö–∞–Ω–∞–ª', '–°–•', '–¶—ñ–Ω–∞', 'TRP', 'Aff', '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –±—é–¥–∂–µ—Ç', '–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç', '–û–ø—Ç–∏–º–∞–ª—å–Ω—ñ —Å–ª–æ—Ç–∏', '–û–ø—Ç–∏–º–∞–ª—å–Ω–∞ –¥–æ–ª—è (%)']], f'–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è_—Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏_{optimization_goal}.xlsx')
        
        plot_split_comparison(all_results, f"–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –∑–∞ {optimization_goal}")
    
    return all_results

# --- –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è ---
# 1. –Ü–º—ñ—Ç–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –°–• —Ç–∞ –ë–ê (—è–∫ –æ–∫—Ä–µ–º—ñ —Å–ª–æ–≤–Ω–∏–∫–∏)
standard_data_by_sh = {
    'Sirius': {
        '–ö–∞–Ω–∞–ª': ['ICTV', '–°–¢–ë', '–ù–û–í–ò–ô', 'ICTV2', '–¢–ï–¢', '–û–¶–ï', '–ú–ï–ì–ê'],
        '–°–•': ['Sirius'] * 7,
        '–¶—ñ–Ω–∞_All 18-60': [18000, 10000, 11000, 12500, 9500, 7000, 8000],
        'TRP_All 18-60': [25.0, 15.0, 18.0, 16.0, 10.0, 8.0, 11.0],
        '–¶—ñ–Ω–∞_W 30+': [19500, 11000, 12500, 13500, 10500, 7500, 8800],
        'TRP_W 30+': [22.0, 14.0, 17.0, 15.0, 9.5, 7.5, 10.5]
    },
    'Space': {
        '–ö–∞–Ω–∞–ª': ['–ü–õ–Æ–°–ü–õ–Æ–°', '–ë–Ü–ì–£–î–Ü', 'Kvartal-TV', '–£–ù–Ü–ê–ù'],
        '–°–•': ['Space'] * 4,
        '–¶—ñ–Ω–∞_All 18-60': [6000, 5000, 4500, 3500],
        'TRP_All 18-60': [7.0, 6.0, 5.0, 4.0],
        '–¶—ñ–Ω–∞_W 30+': [6500, 5500, 5000, 4000],
        'TRP_W 30+': [6.5, 5.5, 4.5, 3.5]
    }
}

user_aff_by_sh = {
    'Sirius': {
        '–ö–∞–Ω–∞–ª': ['ICTV', '–°–¢–ë', '–ù–û–í–ò–ô', 'ICTV2', '–¢–ï–¢', '–û–¶–ï', '–ú–ï–ì–ê'],
        'Aff': [95.0, 85.5, 90.1, 92.5, 88.0, 78.9, 80.0]
    },
    'Space': {
        '–ö–∞–Ω–∞–ª': ['–ü–õ–Æ–°–ü–õ–Æ–°', '–ë–Ü–ì–£–î–Ü', 'Kvartal-TV', '–£–ù–Ü–ê–ù'],
        'Aff': [87.0, 81.5, 75.0, 70.0]
    }
}

# 2. –Ü–º—ñ—Ç–∞—Ü—ñ—è –≤–∏–±–æ—Ä—É –ë–ê —Ç–∞ —Ü—ñ–ª—ñ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó
buying_audiences_choice = {
    'Sirius': 'All 18-60',
    'Space': 'W 30+'
}
total_budget = 500000
goal = 'Aff' # –ó–º—ñ–Ω—ñ—Ç—å –Ω–∞ 'TRP', —â–æ–± –æ–ø—Ç–∏–º—ñ–∑—É–≤–∞—Ç–∏ –∑–∞ TRP

# 3. –í–∏–∫–ª–∏–∫ —Ñ—É–Ω–∫—Ü—ñ—ó –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó
optimize_split_by_sales_house_and_ba(standard_data_by_sh, user_aff_by_sh, total_budget, buying_audiences_choice, goal)
