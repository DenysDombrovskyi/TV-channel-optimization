const pandas = require('pandas-js');
const plot = require('js-plotly-express');

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó
function plotSplitComparison(results, title) {
  const standardShare = results.map(row => row['–î–æ–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç—É']);
  const optimalShare = results.map(row => row['–î–æ–ª—è –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç—É']);
  const optimalSlots = results.map(row => row['–û–ø—Ç–∏–º–∞–ª—å–Ω—ñ —Å–ª–æ—Ç–∏']);
  const labels = results.map(row => row['–ö–∞–Ω–∞–ª']);

  const standardBudgetTrace = {
    x: labels,
    y: standardShare,
    name: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —Å–ø–ª—ñ—Ç',
    type: 'bar'
  };

  const optimalBudgetTrace = {
    x: labels,
    y: optimalShare,
    name: '–û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π —Å–ø–ª—ñ—Ç',
    type: 'bar'
  };

  const slotsTrace = {
    x: labels,
    y: optimalSlots,
    name: '–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ª–æ—Ç—ñ–≤',
    type: 'bar'
  };

  plot({
    title: `–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –∫–∞–Ω–∞–ª—å–Ω–æ–≥–æ —Å–ø–ª—ñ—Ç–∞: ${title}`,
    data: [standardBudgetTrace, optimalBudgetTrace, slotsTrace],
    layout: { barmode: 'group' }
  });
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó
function optimizeSplit(standardDataDict, userAffDict, budget, buyingAudiences, optimizationGoal) {
  // –û–±'—î–¥–Ω–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
  let allData = [];
  for (const salesHouse in standardDataDict) {
    const standardDf = standardDataDict[salesHouse];
    const userDf = userAffDict[salesHouse];
    
    // –ü—Ä–æ—Å—Ç–∞ —ñ–º—ñ—Ç–∞—Ü—ñ—è merge
    const mergedData = standardDf.–ö–∞–Ω–∞–ª.map(channel => {
      const standardRow = {};
      standardDf.–ö–∞–Ω–∞–ª.forEach((c, i) => { if (c === channel) { standardDf.forEach(key => standardRow[key] = standardDf[key][i]); }});
      const userRow = userDf.–ö–∞–Ω–∞–ª.map((c, i) => { if (c === channel) { return { 'Aff': userDf.Aff[i] }; }})[0];
      return {
        ...standardRow,
        ...userRow
      };
    }).filter(d => d.Aff !== undefined);

    const baKey = buyingAudiences[salesHouse];
    mergedData.forEach(row => {
      row['–¶—ñ–Ω–∞'] = row[`–¶—ñ–Ω–∞_${baKey}`];
      row['TRP'] = row[`TRP_${baKey}`];
    });

    allData = allData.concat(mergedData);
  }

  // –û–±—á–∏—Å–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç—É
  let totalStandardBudget = 0;
  allData.forEach(row => {
    row['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –±—é–¥–∂–µ—Ç'] = row.TRP * row.–¶—ñ–Ω–∞;
    totalStandardBudget += row['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –±—é–¥–∂–µ—Ç'];
  });

  // –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è
  let totalOptimizedCost = 0;
  let totalOptimizedAff = 0;
  let totalOptimizedTrp = 0;
  
  allData.forEach(row => {
    // –î—É–∂–µ —Å–ø—Ä–æ—â–µ–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥, —â–æ —ñ–º—ñ—Ç—É—î –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—é
    // –£ —Ä–µ–∞–ª—å–Ω–æ–º—É –¥–æ–¥–∞—Ç–∫—É —Ç—É—Ç –±—É–¥–µ —Å–∫–ª–∞–¥–Ω–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º, —Å—Ö–æ–∂–∏–π –Ω–∞ linprog
    const share = row['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –±—é–¥–∂–µ—Ç'] / totalStandardBudget;
    const allocatedBudget = budget * share;
    const optimalSlots = Math.round(allocatedBudget / row.–¶—ñ–Ω–∞);
    
    row['–û–ø—Ç–∏–º–∞–ª—å–Ω—ñ —Å–ª–æ—Ç–∏'] = optimalSlots;
    row['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç'] = optimalSlots * row.–¶—ñ–Ω–∞;
    
    totalOptimizedCost += row['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç'];
    totalOptimizedAff += optimalSlots * row.Aff;
    totalOptimizedTrp += optimalSlots * row.TRP;
  });

  // –û–±—á–∏—Å–ª–µ–Ω–Ω—è —Å–ø–ª—ñ—Ç—É
  allData.forEach(row => {
    row['–î–æ–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç—É'] = (row['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –±—é–¥–∂–µ—Ç'] / totalStandardBudget) * 100;
    row['–î–æ–ª—è –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç—É'] = (row['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç'] / totalOptimizedCost) * 100;
  });
  
  console.log("\nüìä –ó–∞–≥–∞–ª—å–Ω—ñ –ø—ñ–¥—Å—É–º–∫–æ–≤—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –ø–æ –≤—Å—ñ–π –∫–∞–º–ø–∞–Ω—ñ—ó:");
  console.log(`  - –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏–π –±—é–¥–∂–µ—Ç: ${totalOptimizedCost.toFixed(2)} –≥—Ä–Ω`);
  console.log(`  - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π –∑–∞–≥–∞–ª—å–Ω–∏–π Aff: ${totalOptimizedAff.toFixed(2)}`);
  console.log(`  - –ó–∞–≥–∞–ª—å–Ω–∏–π TRP: ${totalOptimizedTrp.toFixed(2)}`);
  console.log("-" .repeat(30));

  console.log("\nüìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó:");
  console.table(allData.map(d => ({
    '–ö–∞–Ω–∞–ª': d.–ö–∞–Ω–∞–ª, 
    '–°–•': d.–°–•, 
    '–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç': d['–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç'],
    '–î–æ–ª—è –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç—É (%)': d['–î–æ–ª—è –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç—É'].toFixed(2)
  })));
  console.log("-" .repeat(30));

  plotSplitComparison(allData, '–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –∑–∞ ' + optimizationGoal);
}

// --- –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è ---
const standardDataBySh = {
  'Sirius': {
      '–ö–∞–Ω–∞–ª': ['ICTV', '–°–¢–ë', '–ù–û–í–ò–ô', 'ICTV2', '–¢–ï–¢', '–û–¶–ï', '–ú–ï–ì–ê'],
      '–°–•': ['Sirius', 'Sirius', 'Sirius', 'Sirius', 'Sirius', 'Sirius', 'Sirius'],
      '–¶—ñ–Ω–∞_All 18-60': [18000, 10000, 11000, 12500, 9500, 7000, 8000],
      'TRP_All 18-60': [25.0, 15.0, 18.0, 16.0, 10.0, 8.0, 11.0],
      '–¶—ñ–Ω–∞_W 30+': [19500, 11000, 12500, 13500, 10500, 7500, 8800],
      'TRP_W 30+': [22.0, 14.0, 17.0, 15.0, 9.5, 7.5, 10.5]
  },
  'Space': {
      '–ö–∞–Ω–∞–ª': ['–ü–õ–Æ–°–ü–õ–Æ–°', '–ë–Ü–ì–£–î–Ü', 'Kvartal-TV', '–£–ù–Ü–ê–ù'],
      '–°–•': ['Space', 'Space', 'Space', 'Space'],
      '–¶—ñ–Ω–∞_All 18-60': [6000, 5000, 4500, 3500],
      'TRP_All 18-60': [7.0, 6.0, 5.0, 4.0],
      '–¶—ñ–Ω–∞_W 30+': [6500, 5500, 5000, 4000],
      'TRP_W 30+': [6.5, 5.5, 4.5, 3.5]
  }
};

const userAffBySh = {
  'Sirius': {
      '–ö–∞–Ω–∞–ª': ['ICTV', '–°–¢–ë', '–ù–û–í–ò–ô', 'ICTV2', '–¢–ï–¢', '–û–¶–ï', '–ú–ï–ì–ê'],
      'Aff': [95.0, 85.5, 90.1, 92.5, 88.0, 78.9, 80.0]
  },
  'Space': {
      '–ö–∞–Ω–∞–ª': ['–ü–õ–Æ–°–ü–õ–Æ–°', '–ë–Ü–ì–£–î–Ü', 'Kvartal-TV', '–£–ù–Ü–ê–ù'],
      'Aff': [87.0, 81.5, 75.0, 70.0]
  }
};

// –ü–∞—Ä–∞–º–µ—Ç—Ä–∏
const buyingAudiencesChoice = {
  'Sirius': 'All 18-60',
  'Space': 'W 30+'
};
const totalBudget = 500000;
const goal = 'Aff'; // 'Aff' –∞–±–æ 'TRP'

optimizeSplit(standardDataBySh, userAffBySh, totalBudget, buyingAudiencesChoice, goal);
